// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StantsiyaSykhivApi.Data;

#nullable disable

namespace StantsiyaSykhivApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("StantsiyaSykhivApi.Data.Models.Entities.Board", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Boards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProjectId = 1,
                            Title = "Development"
                        },
                        new
                        {
                            Id = 2,
                            ProjectId = 2,
                            Title = "UI Design"
                        });
                });

            modelBuilder.Entity("StantsiyaSykhivApi.Data.Models.Entities.Column", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BoardId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.ToTable("Columns");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BoardId = 1,
                            Order = 1,
                            Title = "To Do"
                        },
                        new
                        {
                            Id = 2,
                            BoardId = 1,
                            Order = 2,
                            Title = "In Progress"
                        },
                        new
                        {
                            Id = 3,
                            BoardId = 1,
                            Order = 3,
                            Title = "Done"
                        });
                });

            modelBuilder.Entity("StantsiyaSykhivApi.Data.Models.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("TaskId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            Content = "Don't forget logging",
                            TaskId = 1,
                            Timestamp = new DateTime(2025, 5, 29, 15, 1, 55, 771, DateTimeKind.Utc).AddTicks(8078)
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            Content = "UI is almost done",
                            TaskId = 2,
                            Timestamp = new DateTime(2025, 5, 29, 15, 1, 55, 771, DateTimeKind.Utc).AddTicks(8079)
                        });
                });

            modelBuilder.Entity("StantsiyaSykhivApi.Data.Models.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Create backend API",
                            OwnerId = 1,
                            Title = "API Dev"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Build UI",
                            OwnerId = 2,
                            Title = "Frontend UI"
                        });
                });

            modelBuilder.Entity("StantsiyaSykhivApi.Data.Models.Entities.TaskColumnLink", b =>
                {
                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<int>("ColumnId")
                        .HasColumnType("int");

                    b.HasKey("TaskId", "ColumnId");

                    b.HasIndex("ColumnId");

                    b.ToTable("TaskColumnLinks");

                    b.HasData(
                        new
                        {
                            TaskId = 1,
                            ColumnId = 1
                        },
                        new
                        {
                            TaskId = 2,
                            ColumnId = 2
                        });
                });

            modelBuilder.Entity("StantsiyaSykhivApi.Data.Models.Entities.TaskItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssigneeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssigneeId = 2,
                            Description = "Initial project setup",
                            EndDate = new DateTime(2025, 5, 31, 15, 1, 55, 771, DateTimeKind.Utc).AddTicks(8031),
                            ProjectId = 1,
                            StartDate = new DateTime(2025, 5, 27, 15, 1, 55, 771, DateTimeKind.Utc).AddTicks(8023),
                            Status = "ToDo",
                            Title = "Setup project"
                        },
                        new
                        {
                            Id = 2,
                            AssigneeId = 3,
                            Description = "UI for login",
                            EndDate = new DateTime(2025, 5, 30, 15, 1, 55, 771, DateTimeKind.Utc).AddTicks(8034),
                            ProjectId = 2,
                            StartDate = new DateTime(2025, 5, 28, 15, 1, 55, 771, DateTimeKind.Utc).AddTicks(8034),
                            Status = "InProgress",
                            Title = "Create login form"
                        });
                });

            modelBuilder.Entity("StantsiyaSykhivApi.Data.Models.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("StantsiyaSykhivApi.Data.Models.Entities.Board", b =>
                {
                    b.HasOne("StantsiyaSykhivApi.Data.Models.Entities.Project", "Project")
                        .WithMany("Boards")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("StantsiyaSykhivApi.Data.Models.Entities.Column", b =>
                {
                    b.HasOne("StantsiyaSykhivApi.Data.Models.Entities.Board", "Board")
                        .WithMany("Columns")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");
                });

            modelBuilder.Entity("StantsiyaSykhivApi.Data.Models.Entities.Comment", b =>
                {
                    b.HasOne("StantsiyaSykhivApi.Data.Models.Entities.User", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StantsiyaSykhivApi.Data.Models.Entities.TaskItem", "Task")
                        .WithMany("Comments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("StantsiyaSykhivApi.Data.Models.Entities.Project", b =>
                {
                    b.HasOne("StantsiyaSykhivApi.Data.Models.Entities.User", "Owner")
                        .WithMany("Projects")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("StantsiyaSykhivApi.Data.Models.Entities.TaskColumnLink", b =>
                {
                    b.HasOne("StantsiyaSykhivApi.Data.Models.Entities.Column", "Column")
                        .WithMany("TaskColumnLinks")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StantsiyaSykhivApi.Data.Models.Entities.TaskItem", "Task")
                        .WithMany("TaskColumnLinks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Column");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("StantsiyaSykhivApi.Data.Models.Entities.TaskItem", b =>
                {
                    b.HasOne("StantsiyaSykhivApi.Data.Models.Entities.User", "Assignee")
                        .WithMany("Tasks")
                        .HasForeignKey("AssigneeId");

                    b.HasOne("StantsiyaSykhivApi.Data.Models.Entities.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignee");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("StantsiyaSykhivApi.Data.Models.Entities.Board", b =>
                {
                    b.Navigation("Columns");
                });

            modelBuilder.Entity("StantsiyaSykhivApi.Data.Models.Entities.Column", b =>
                {
                    b.Navigation("TaskColumnLinks");
                });

            modelBuilder.Entity("StantsiyaSykhivApi.Data.Models.Entities.Project", b =>
                {
                    b.Navigation("Boards");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("StantsiyaSykhivApi.Data.Models.Entities.TaskItem", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("TaskColumnLinks");
                });

            modelBuilder.Entity("StantsiyaSykhivApi.Data.Models.Entities.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Projects");

                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
